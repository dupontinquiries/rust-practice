// Definition for singly-linked list.
#[derive(PartialEq, Eq, Clone, Debug)]
pub struct ListNode {
  pub val: i32,
  pub next: Option<Box<ListNode>>
}

impl ListNode {
  #[inline]
  fn new(val: i32) -> Self {
    ListNode {
      next: None,
      val
    }
  }
}

// impl Solution {
//     pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
//         // do something
//     }
// }

fn build_node_simple(n: i32) -> ListNode {
    ListNode {
        val: n,
        next: None,
    }
}

fn build_node(n: i32, ne: Option<Box<ListNode>>) -> ListNode {
    ListNode {
        val: n,
        next: match ne {
            Some(p) => p,
            None => None,
        },
    }
}

fn main() {
    println!("running test 1");
    // list1: 1->2->4
    let l1_2 = build_node_simple(4);
    let l1_1 = build_node(2, l1_2);
    // let l1_0 = build_node(1, l1_0);
    println!("{:?}", l1_1.next);
    // let l1_2 = ListNode {
    //     val: 4,
    //     next: None
    // };
    // let l1_1 = ListNode {
    //     val: 2,
    //     next: None//l1_2
    // };
    // let l1_0 = ListNode {
    //     val: 1,
    //     next: None//l1_1
    // };

    // // list2: 1->3->4
    // let l2_2 = ListNode {
    //     val: 4,
    //     next: None
    // };
    // let l2_1 = ListNode {
    //     val: 3,
    //     next: l2_2
    // };
    // let l2_0 = ListNode {
    //     val: 1,
    //     next: l2_1
    // };

    // call algorithm and return result
    // merge_two_lists(l1_0, l2_0);

    println!("finished running test 1");
    println!("running test 2");
    // test 2
    println!("finished running test 2");
}
